name: Django DRF API CI/CD

on:
  push:
    branches: [ "master", "main" ]
  pull_request:
    branches: [ "master", "main" ]

env:
  DJANGO_SETTINGS_MODULE: banas.settings_ci

jobs:
  test:
    name: Code Quality & Testing
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    # ==================== CODE QUALITY CHECKS ====================
    - name: Code formatting check (Black)
      run: |
        echo "🎨 Checking code formatting with Black..."
        black --check --diff .
        
    - name: Import sorting check (isort)
      run: |
        echo "📦 Checking import sorting with isort..."
        isort --check-only --diff .
        
    - name: Linting (flake8)
      run: |
        echo "🔍 Running flake8 linting..."
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Security scan (bandit)
      run: |
        echo "🔒 Running security scan with bandit..."
        bandit -r . -x */tests/*,*/migrations/* -f json -o bandit-report.json || true
        bandit -r . -x */tests/*,*/migrations/* -f txt
        
    # ==================== DJANGO FRAMEWORK CHECKS ====================
    - name: Django system check
      run: |
        echo "🔧 Running Django system checks..."
        python manage.py check --settings=banas.settings_ci
        
    - name: Django security check
      run: |
        echo "🛡️ Running Django security checks..."
        python manage.py check --deploy --settings=banas.settings_ci
        
    - name: Check for missing migrations
      run: |
        echo "📋 Checking for missing migrations..."
        python manage.py makemigrations --dry-run --check --settings=banas.settings_ci
        
    - name: Django migrate
      run: |
        echo "🗄️ Running Django migrations..."
        python manage.py migrate --settings=banas.settings_ci
        
    - name: Collect static files
      run: |
        echo "📁 Collecting static files..."
        python manage.py collectstatic --noinput --settings=banas.settings_ci
        
    # ==================== TESTING ====================
    - name: Run Django tests with coverage
      run: |
        echo "🧪 Running Django tests with coverage..."
        coverage run --source='.' manage.py test --settings=banas.settings_ci
        coverage report
        coverage xml
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    # ==================== API & DOCUMENTATION CHECKS ====================
    - name: Validate API schema (OpenAPI/Swagger)
      run: |
        echo "📖 Validating API schema with drf-yasg..."
        python -c "
        import os
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'banas.settings_ci')
        import django
        django.setup()
        from drf_yasg.generators import OpenAPISchemaGenerator
        from drf_yasg import openapi
        try:
            generator = OpenAPISchemaGenerator(
                info=openapi.Info(
                    title='Banas API',
                    default_version='v1',
                    description='API Documentation'
                )
            )
            schema = generator.get_schema()
            print('✅ API schema generated successfully')
            print(f'✅ Found {len(schema.paths)} API endpoints')
        except Exception as e:
            print(f'❌ API schema generation failed: {e}')
            raise
        "
        
    - name: Basic Django import verification
      run: |
        echo "🐍 Verifying Django can import all models..."
        python -c "
        import os
        import django
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'banas.settings_ci')
        django.setup()
        
        # Import all models from each app
        from django.apps import apps
        print('✅ Django setup successful')
        
        for app in apps.get_app_configs():
            try:
                models_module = app.models_module
                if models_module:
                    print(f'✅ Models imported successfully from {app.name}')
            except Exception as e:
                print(f'⚠️ Warning importing models from {app.name}: {e}')
                
        print('🎉 All Django imports successful!')
        "
        
  # ==================== DOCKER CHECKS ====================
  docker:
    name: Docker Build & Security
    runs-on: ubuntu-latest
    needs: [test]  # Only run if tests pass
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
          
    # ==================== DOCKER BUILD TESTS ====================
    - name: Test Docker build
      run: |
        echo "🛠️ Testing Docker build process..."
        docker build --target builder -t banas-api:builder .
        docker build -t banas-api:latest .
        echo "✅ Docker build successful"
        
    - name: Inspect Docker image
      run: |
        echo "🔍 Inspecting Docker image..."
        docker images banas-api:latest
        docker history banas-api:latest --no-trunc
        
        # Check image size
        IMAGE_SIZE=$(docker images banas-api:latest --format "{{.Size}}")
        echo "📏 Image size: $IMAGE_SIZE"
        
        # Get image details
        docker inspect banas-api:latest | jq '.[0] | {Id: .Id, Created: .Created, Size: .Size, Architecture: .Architecture}'
        
    - name: Test Docker container startup
      run: |
        echo "🚀 Testing Docker container startup..."
        
        # Create a test environment file
        cat > test.env << EOF
        DJANGO_SETTINGS_MODULE=banas.settings_docker
        SECRET_KEY=test-secret-key-for-docker-testing-only
        DEBUG=False
        EOF
        
        # Start container in background
        docker run -d --name banas-test \
          --env-file test.env \
          -p 8000:8000 \
          banas-api:latest
          
        # Wait for container to be ready
        echo "⏳ Waiting for container to start..."
        sleep 10
        
        # Check if container is running
        if docker ps | grep -q banas-test; then
          echo "✅ Container started successfully"
        else
          echo "❌ Container failed to start"
          docker logs banas-test
          exit 1
        fi
        
    - name: Run container health checks
      run: |
        echo "🩺 Running container health checks..."
        
        # Install requests for health check
        docker exec banas-test pip install requests
        
        # Copy health check script and run it
        docker cp health_check.py banas-test:/app/
        docker exec banas-test python health_check.py
        
        echo "✅ Container health checks passed"
        
    - name: Test container logs
      run: |
        echo "📜 Checking container logs..."
        docker logs banas-test --tail 50
        
    - name: Cleanup test containers
      if: always()
      run: |
        echo "🧽 Cleaning up test containers..."
        docker stop banas-test || true
        docker rm banas-test || true
        docker rmi banas-api:builder || true
        docker rmi banas-api:latest || true
        
    # ==================== DOCKER SECURITY SCANNING ====================
    - name: Run Trivy security scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'banas-api:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run Trivy security scan (table format)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'banas-api:latest'
        format: 'table'
        exit-code: '0'  # Don't fail on vulnerabilities for now
        
  # ==================== DOCKER COMPOSE VALIDATION ====================
  docker-compose:
    name: Docker Compose Validation
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Validate docker-compose.yml
      run: |
        echo "📄 Validating docker-compose.yml..."
        docker-compose config --quiet
        echo "✅ docker-compose.yml is valid"
        
    - name: Test docker-compose build
      run: |
        echo "🛠️ Testing docker-compose build..."
        
        # Create minimal .env for testing
        cat > .env << EOF
        DJANGO_SETTINGS_MODULE=banas.settings_docker
        SECRET_KEY=test-secret-key-for-compose-testing
        DEBUG=False
        DB_NAME=test
        DB_USER=test
        DB_PASSWORD=test
        DB_HOST=localhost
        DB_PORT=5432
        REDIS_URL=redis://localhost:6379
        AWS_ACCESS_KEY_ID=test
        AWS_SECRET_ACCESS_KEY=test
        AWS_STORAGE_BUCKET_NAME=test
        AWS_S3_REGION_NAME=us-east-1
        EOF
        
        # Test build only (don't start services)
        docker-compose build --no-cache
        echo "✅ docker-compose build successful"
        
    - name: Validate compose file structure
      run: |
        echo "🔍 Validating compose file structure..."
        
        # Check for required sections
        if ! grep -q "services:" docker-compose.yml; then
          echo "❌ Missing services section"
          exit 1
        fi
        
        if ! grep -q "volumes:" docker-compose.yml; then
          echo "⚠️ No volumes section found"
        fi
        
        # Check for security best practices
        if grep -q "privileged: true" docker-compose.yml; then
          echo "⚠️ Warning: privileged mode detected"
        fi
        
        if ! grep -q "restart:" docker-compose.yml; then
          echo "⚠️ Warning: No restart policy defined"
        fi
        
        echo "✅ Compose file structure validation passed"
        
  # ==================== BUILD SUMMARY ====================
  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [test, docker, docker-compose]
    if: always()
    
    steps:
    - name: CI Results Summary
      run: |
        echo "## 🚀 CI/CD Pipeline Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Check Category | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|---------------|---------|" >> $GITHUB_STEP_SUMMARY
        echo "| Code Quality | ${{ needs.test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Django Framework | ${{ needs.test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Tests & Coverage | ${{ needs.test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| API Validation | ${{ needs.test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Docker Build | ${{ needs.docker.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Docker Security | ${{ needs.docker.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Docker Compose | ${{ needs.docker-compose.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Overall status
        ALL_PASSED="true"
        if [ "${{ needs.test.result }}" != "success" ]; then ALL_PASSED="false"; fi
        if [ "${{ needs.docker.result }}" != "success" ]; then ALL_PASSED="false"; fi
        if [ "${{ needs.docker-compose.result }}" != "success" ]; then ALL_PASSED="false"; fi
        
        if [ "$ALL_PASSED" == "true" ]; then
          echo "🎉 **All checks passed - Build is ready for deployment!** 🚀" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Deployment Ready Checklist" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Code quality and formatting" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Django system and security checks" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Unit tests with coverage" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ API schema validation" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Docker container builds and runs" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Container security scan" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Docker Compose configuration" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Some checks failed - Build is not ready for deployment** ⛔" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Please review the failed checks above and fix the issues before deploying." >> $GITHUB_STEP_SUMMARY
        fi
